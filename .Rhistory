data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature, adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
for (i in 1:nrow(a)) {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) / mean(as.numeric(a[i, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, target_feature, SIMPLIFY = FALSE)
return(result)
}
rm(list = ls())
tcga.data <- read_tcga_xena(folder_path = 'e:/project/WMDS_driver_lncRNA/data/TCGA_14cancer/fpkm/')
tcga.data <- tcga_sample_filter(tcga.data)
tumor.data <- fpkm_to_tpm(tcga.data[['tumor']])
normal.data <- fpkm_to_tpm(tcga.data[['normal']])
drivers.ID <- read.csv('e:/project/DriverLnc2iPSC/Data/pancancer_driver/pan_dri_5.csv')$lnc
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature, adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
for (i in 1:nrow(a)) {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) / mean(as.numeric(a[i, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, target_feature, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
View(res)
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature, adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
for (i in 1:nrow(a)) {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) / mean(as.numeric(a[i, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature, adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
for (i in 1:nrow(a)) {
print(rownames(a)[i])
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) / mean(as.numeric(a[i, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
View(res)
?registerDoParallel
?foreach
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH', cores = 12) {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
doParallel::registerDoParallel(cores = cores)
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
i <- rownames(a)
df_result <- foreach::foreach(i = seq_along(i), .combine = rbind) %dopar% {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) /
mean(as.numeric(a[i, ])))
data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
)
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
library(ComprehensivePipelineUtils)
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
library(foreach)
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH', cores = 12) {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
doParallel::registerDoParallel(cores = cores)
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
i <- rownames(a)
df_result <- foreach::foreach(i = seq_along(i), .combine = rbind) %dopar% {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) /
mean(as.numeric(a[i, ])))
data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
)
}
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data,
data_list_2 = tumor.data,
target_feature = drivers.ID,
adj_method = 'BH')
gc()
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH', cores = 12) {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
doParallel::registerDoParallel(cores = cores)
# # init result data frame
# df_result <- data.frame(
#   feature = character(),
#   log2_fold_change = numeric(),
#   p_value = numeric(),
#   stringsAsFactors = FALSE
# )
# for loop
i <- rownames(a)
df_result <- foreach::foreach(i = seq_along(i)) %dopar% {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) /
mean(as.numeric(a[i, ])))
data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
)
}
# df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
gc()
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
gc()
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
rm(list = ls())
tcga.data <- read_tcga_xena(folder_path = 'e:/project/WMDS_driver_lncRNA/data/TCGA_14cancer/fpkm/')
tcga.data <- tcga_sample_filter(tcga.data)
tumor.data <- fpkm_to_tpm(tcga.data[['tumor']])
normal.data <- fpkm_to_tpm(tcga.data[['normal']])
drivers.ID <- read.csv('e:/project/DriverLnc2iPSC/Data/pancancer_driver/pan_dri_5.csv')$lnc
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH', cores = 12) {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
doParallel::registerDoParallel(cores = cores)
# # init result data frame
# df_result <- data.frame(
#   feature = character(),
#   log2_fold_change = numeric(),
#   p_value = numeric(),
#   stringsAsFactors = FALSE
# )
# for loop
i <- rownames(a)
df_result <- foreach::foreach(i = seq_along(i)) %dopar% {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) /
mean(as.numeric(a[i, ])))
data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
)
}
# df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
i <- rownames(a)
lapply(seq_along(i), function(x) {
test <- stats::wilcox.test(as.numeric(a[i, ]), as.numeric(b[i, ]))
log2_fold_change <- log2(mean(as.numeric(b[i, ])) / mean(as.numeric(a[i, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[i],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
return()
})
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
gc()
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
multi_wilcox_test <- function(data_list_1, data_list_2, target_feature,
adj_method = 'BH') {
if (length(data_list_1) != length(data_list_2)) {
stop('The 2 input lists should have same length')
}
perform_wilcox <- function(a, b, target_feature = target_feature) {
a[, 1] <- unlist(lapply(a[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(a) <- a[, 1]
a <- a[-1]
a <- a[target_feature, ]
b[, 1] <- unlist(lapply(b[, 1], function(x) {
strsplit(x, "\\.")[[1]][1]
}))
rownames(b) <- b[, 1]
b <- b[-1]
b <- b[target_feature, ]
# init result data frame
df_result <- data.frame(
feature = character(),
log2_fold_change = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# for loop
i <- rownames(a)
lapply(seq_along(i), function(x) {
test <- stats::wilcox.test(as.numeric(a[x, ]), as.numeric(b[x, ]))
log2_fold_change <- log2(mean(as.numeric(b[x, ])) / mean(as.numeric(a[x, ])))
df_result <- rbind(df_result, data.frame(
feature = rownames(a)[x],
log2_fold_change = log2_fold_change,
p_value = test$p.value,
stringsAsFactors = FALSE
))
return()
})
df_result$p_value <- stats::p.adjust(df_result$p_value, method = adj_method)
return(df_result)
}
result <- mapply(perform_wilcox, data_list_1, data_list_2, SIMPLIFY = FALSE)
return(result)
}
res <- multi_wilcox_test(data_list_1 = normal.data[1:2],
data_list_2 = tumor.data[1:2],
target_feature = drivers.ID,
adj_method = 'BH')
gc()
library(devtools)
