install.packages('renv')
clear
gc()
renv::init()
clear
renv::snapshot()
clear
install.packages('usethis')
clear
usethis::use_package('renv', type = 'Suggests')
renv::snapshot()
install.packages('rmarkdown')
library(usethis)
use_readme_rmd()
library(ComprehensivePipelineUtils)
renv::snapshot()
if (file.exists("./symbol2ID.rdata")) {
load("./symbol2ID.rdata")
} else {
gtf <- read.csv("../DriverLnc2iPSC/Data/gencode.v22.annotation.gtf.DataFrame", sep = "\t")
gtf <- subset(gtf, type == "gene") %>% .[c(7, 10, 13)]
gtf$gene_id <- lapply(gtf$gene_id, function(x) {
return(str_split_1(x, "\\.")[1])
})
save(list = c("gtf"), file = "./symbol2ID.rdata")
}
getwd
getwd()
use_package('dplyr')
use_package('tidyverse')
use_package("tidyverse", type = "depends")
View(gtf)
use_pipe(export = TRUE)
if (file.exists("./symbol2ID.rdata")) {
load("./symbol2ID.rdata")
} else {
gtf <- read.csv("../DriverLnc2iPSC/Data/gencode.v22.annotation.gtf.DataFrame", sep = "\t")
gtf <- subset(gtf, type == "gene") %>% .[c(7, 10, 13)]
gtf$gene_id <- lapply(gtf$gene_id, function(x) {
return(str_split_1(x, "\\.")[1])
})
save(list = c("gtf"), file = "./symbol2ID.rdata")
}
library(magrittr)
if (file.exists("./symbol2ID.rdata")) {
load("./symbol2ID.rdata")
} else {
gtf <- read.csv("../DriverLnc2iPSC/Data/gencode.v22.annotation.gtf.DataFrame", sep = "\t")
gtf <- subset(gtf, type == "gene") %>% .[c(7, 10, 13)]
gtf$gene_id <- lapply(gtf$gene_id, function(x) {
return(str_split_1(x, "\\.")[1])
})
save(list = c("gtf"), file = "./symbol2ID.rdata")
}
use_package(package = 'stringi', type = 'Imports')
use_package(package = 'stringr', type = 'Imports')
library(stringi)
library(stringr)
if (file.exists("./symbol2ID.rdata")) {
load("./symbol2ID.rdata")
} else {
gtf <- read.csv("../DriverLnc2iPSC/Data/gencode.v22.annotation.gtf.DataFrame", sep = "\t")
gtf <- subset(gtf, type == "gene") %>% .[c(7, 10, 13)]
gtf$gene_id <- lapply(gtf$gene_id, function(x) {
return(str_split_1(x, "\\.")[1])
})
save(list = c("gtf"), file = "./symbol2ID.rdata")
}
View(gtf)
gtf <- gtf[, -1]
View(gtf)
use_data(gtf)
symbol_ID_pairs <- gtf
symbol_ID_pairs_based_gencodeV22 <- gtf
use_data(symbol_ID_pairs_based_gencodeV22)
load('data/symbol_ID_pairs_based_gencodeV22.rda')
rm(list = ls())
ID2Symbol <- function(ID_list) {
load('data/symbol_ID_pairs_based_gencodeV22.rda')
}
load('data/symbol_ID_pairs_based_gencodeV22.rda')
symbol_ID_pairs_based_gencodeV22
install.packages('devtools')
library(devtools)
document()
clear
document()
subset()
clear
library(ComprehensivePipelineUtils)
?ID2Symbol
ID2Symbol(c('ENSG00000162444', 'ENSG00000130939'))
a <- ID2Symbol(c('ENSG00000162444', 'ENSG00000130939'))
a
Symbol2ID(c('H19', 'HOTAIR'))
ComprehensivePipelineUtils::ID2Symbol(c('ENSG00000162444', 'ENSG00000130939'))
Symbol2ID(c('H19', 'HOTAIR'))
ComprehensivePipelineUtils::ID2Symbol(c('ENSG00000162444', 'ENSG00000130939'))
document()
library(ComprehensivePipelineUtils)
ID_2_Symbol(c('ENSG00000162444', 'ENSG00000130939'))
Symbol2ID(c('H19', 'HOTAIR'))
use_package('styler', type = 'Suggest')
styler::style_pkg()
use_package('lintr', type = 'Suggest')
lintr::lint_package()
use_github_action('lint')
use_testthat()
install.packages('testthat')
use_test()
ID_2_Symbol(c("ENSG00000162444", "ENSG00000130939"))
document()
library(ComprehensivePipelineUtils)
data("symbol_ID_pairs_based_gencodeV22", package = "ComprehensivePipelineUtils")
expect_equal(ID_2_Symbol(c("ENSG00000162444", "ENSG00000130939")), c('RBP7', 'UBE4B'))
test_that("ID_2_Symbol() function will return gene symbol", {
data("symbol_ID_pairs_based_gencodeV22", package = "ComprehensivePipelineUtils")
expect_equal(ID_2_Symbol(c("ENSG00000162444", "ENSG00000130939")), c('RBP7', 'UBE4B'))
})
usethis::use_mit_license()
usethis::use_version()
devtools::check()
styler::style_pkg()
devtools::check()
ID_2_Symbol(c("ENSG00000162444", "ENSG00000130939"))
load("./data/symbol_ID_pairs_based_gencodeV22.rda")
use_data(symbol_ID_pairs_based_gencodeV22, internal = TRUE)
devtools::check()
load("R/sysdata.rda")
use_test()
ID_2_Symbol(c("ENSG00000162444", "ENSG00000130939"))
Symbol2ID(c("H19", "HOTAIR"))
devtools::check()
document()
use_github_action('lint')
document()
use_test()
library(ComprehensivePipelineUtils)
id_to_symbol(c("ENSG00000162444", "ENSG00000130939"))
symbol_to_id(c("H19", "HOTAIR"))
lintr::lint_package()
lintr:::addin_lint_package()
devtools:::test_coverage()
devtools::check()
document()
devtools::check()
install.packages("pkgdown")
library(pkgdowm)
install.packages("pkgdown")
use_tidy_github_actions()
build_rmd()
install.packages('pkgdowm')
install.packages('pkgdown')
install.packages("C:/Users/Luo_ITM_ZJU/Downloads/0ea2eac907c57b179550c893fcafee05d728e7d6951219393870ea3f0c6152e7.zip", repos = NULL, type = "win.binary")
use_pkgdown()
pkgdown::build_site()
devtools:::test_coverage()
install.packages('covr')
install.packages('DT')
install.packages("C:/Users/Luo_ITM_ZJU/Downloads/6c22724135f9ae0e58cd0600577bc9838a88081f6ae58339691a01c98ed78805.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Luo_ITM_ZJU/Downloads/82fd0735965af8c99da142ee80e25cf2454cebd6df15e866c539f1cae1fdedc4.zip", repos = NULL, type = "win.binary")
devtools:::test_coverage()
library(ComprehensivePipelineUtils)
devtools:::test_coverage()
gc()
devtools:::test_coverage_active_file()
devtools:::test_coverage()
install.packages('crosstalk')
install.packages("C:/Users/Luo_ITM_ZJU/Downloads/61fb9eed9352822aab23838b8f8440b97008ac5a08be51a7bec4fa614faebe37.zip", repos = NULL, type = "win.binary")
install.packages('crosstalk')
devtools:::test_coverage()
devtools::build_rmd()
usethis::use_news_md()
usethis::use_code_of_conduct()
usethis::use_code_of_conduct(contact = 'carl614317043@gmail.com')
