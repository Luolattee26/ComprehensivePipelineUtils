df_selected$cancer_type <- tmp_deg_selected$cancer_type
df_selected <- subset(df_selected, df_selected$padj < deg_padj_threshold)
df_selected$abs_corr_rank <- rank(-df_selected$abs_corr, ties.method = "min")
df_selected$abs_log2FoldChange_rank <- rank(-abs(df_selected$log2FoldChange), ties.method = "min")
if (RRA_intergration) {
glist <- list(abs_corr_rank = df_selected[[test_factor_col]][unlist(df_selected$abs_corr_rank)],
abs_log2FoldChange_rank = df_selected[[test_factor_col]][unlist(df_selected$abs_log2FoldChange_rank)])
if (length(glist[[1]]) == 0 | length(glist[[2]]) == 0) {
return(df_selected)
} else {
ag <- RobustRankAggreg::aggregateRanks(glist)
ag <- ag[match(df_selected[[test_factor_col]], ag$Name), ]
df_selected$RRA_score <- ag$Score
df_selected$Rank <- rank(df_selected$RRA_score, ties.method = "min")
df_selected <- df_selected[order(df_selected$Rank, decreasing = FALSE), ]
return(df_selected)
}
} else {
return(df_selected)
}
})
names(top_by_group_list) <- names(corr_list)
return(top_by_group_list)
}
load('e:/project/DriverLnc2iPSC/Result/corr.coef.rdata')
deg <- read.csv('e:/project/DriverLnc2iPSC/Result/DEG/pandri_5/DESeq2_res_ref_normal.csv')
res <- deg_corr_selection(corr_list = corr.coef,
deg_df = deg,
RRA_intergration = TRUE)
View(res)
View(res[["TCGA-KIRP"]][["ENSG00000204531"]])
2 * 1.4958604
View(deg)
rm(list = ls())
deg_corr_selection <- function(corr_list, deg_df, top = 15,
corr_padj_threshold = 0.05,
deg_padj_threshold = 0.01,
test_factor_col = 'feature_a',
target_factor_col = 'feature_b',
RRA_intergration = TRUE) {
top_by_group_list <- lapply(names(corr_list), function(cancer) {
tmp_corr <- corr_list[[cancer]]
tmp_deg <- subset(deg_df, deg_df$cancer_type == cancer)
tmp_group_list <- split(tmp_corr, tmp_corr[[target_factor_col]])
top_by_group <- lapply(tmp_group_list, function(df) {
df <- df[df$p_value < corr_padj_threshold, ]
df <- df[order(df$abs_corr, decreasing = TRUE), ]
df_selected <- df[1:min(top, nrow(df)), ]
tmp_deg_selected <- tmp_deg[match(df_selected[[test_factor_col]], tmp_deg$Ensembl_ID), ]
df_selected$log2FoldChange <- tmp_deg_selected$log2FoldChange
df_selected$padj <- tmp_deg_selected$padj
df_selected$cancer_type <- tmp_deg_selected$cancer_type
df_selected <- subset(df_selected, df_selected$padj < deg_padj_threshold)
df_selected$abs_corr_rank <- rank(-df_selected$abs_corr, ties.method = "min")
df_selected$abs_log2FoldChange_rank <- rank(-abs(df_selected$log2FoldChange), ties.method = "min")
if (RRA_intergration) {
glist <- list(abs_corr_rank = df_selected[[test_factor_col]][unlist(df_selected$abs_corr_rank)],
abs_log2FoldChange_rank = df_selected[[test_factor_col]][unlist(df_selected$abs_log2FoldChange_rank)])
if (length(glist[[1]]) == 0 | length(glist[[2]]) == 0) {
return(df_selected)
} else {
ag <- RobustRankAggreg::aggregateRanks(glist)
ag <- ag[match(df_selected[[test_factor_col]], ag$Name), ]
df_selected$RRA_score <- ag$Score
df_selected$Rank <- rank(df_selected$RRA_score, ties.method = "min")
df_selected <- df_selected[order(df_selected$Rank, decreasing = FALSE), ]
return(df_selected)
}
} else {
return(df_selected)
}
})
names(top_by_group_list) <- names(corr_list)
return(top_by_group_list)
}
load('e:/project/DriverLnc2iPSC/Result/corr.coef.rdata')
deg <- read.csv('e:/project/DriverLnc2iPSC/Result/DEG/pandri_5/DESeq2_res_ref_normal.csv')
res <- deg_corr_selection(corr_list = corr.coef,
deg_df = deg,
RRA_intergration = TRUE)
gc()
View(res)
View(res[["TCGA-KIRP"]][["ENSG00000136826"]])
View(res[["TCGA-KIRP"]][["ENSG00000204531"]])
gc()
library(devtools)
document()
use_test()
styler::style_pkg()
lintr::lint_package()
seq_len(min(15, 10))
styler::style_pkg()
lintr::lint_package()
check()
rm(list = ls())
gc()
# install.packages("devtools")
devtools::install_github("Luolattee26/ComprehensivePipelineUtils")
rm(list = ls())
d2i_summary <- function(selection_res_list, top = 1) {
}
setwd('e:/project/DriverLnc2iPSC/')
# read DEG result
deg <- read.csv('./Result/DEG/pandri_5/DESeq2_res_ref_normal.csv')
#' To select DEGs related to iPSC-factors in d2i analysis pipeline.
#'
#' @param corr_list corr.coef list get from corr_rank function
#' @param deg_df deg info get from deseq2 (all cancer types)
#' @param top top n genes to chose
#' @param corr_padj_threshold adjustment p-value threshold for corr.coef
#' @param deg_padj_threshold adjustment p-value threshold for deg test
#' @param test_factor_col column name of test factor (drivers) in corr.coef
#' @param target_factor_col column name of iPSC-factor in corr.coef
#' @param rra_intergration whether use RRA algorithm to integrate LFC&corr ranks
#'
#' @return result list of each cancer types.
#' @export
#'
#' @examples
#' NULL
deg_corr_selection <- function(corr_list, deg_df, top = 15,
corr_padj_threshold = 0.05,
deg_padj_threshold = 0.01,
test_factor_col = "feature_a",
target_factor_col = "feature_b",
rra_intergration = TRUE) {
top_by_group_list <- lapply(names(corr_list), function(cancer) {
tmp_corr <- corr_list[[cancer]]
tmp_deg <- subset(deg_df, deg_df$cancer_type == cancer)
tmp_group_list <- split(tmp_corr, tmp_corr[[target_factor_col]])
top_by_group <- lapply(tmp_group_list, function(df) {
df <- df[df$p_value < corr_padj_threshold, ]
df <- df[order(df$abs_corr, decreasing = TRUE), ]
df_selected <- df[seq_len(min(top, nrow(df))), ]
tmp_deg_selected <- tmp_deg[match(
df_selected[[test_factor_col]],
tmp_deg$Ensembl_ID
), ]
df_selected$log2FoldChange <- tmp_deg_selected$log2FoldChange
df_selected$padj <- tmp_deg_selected$padj
df_selected$cancer_type <- tmp_deg_selected$cancer_type
df_selected <- subset(df_selected, df_selected$padj < deg_padj_threshold)
df_selected$abs_corr_rank <- rank(-df_selected$abs_corr,
ties.method = "min"
)
df_selected$abs_log2FoldChange_rank <-
rank(-abs(df_selected$log2FoldChange), ties.method = "min")
if (rra_intergration) {
df <- df_selected
glist <- list(
abs_corr_rank =
df[[test_factor_col]][unlist(df$abs_corr_rank)],
abs_log2FoldChange_rank =
df[[test_factor_col]][unlist(df$abs_log2FoldChange_rank)]
)
if (length(glist[[1]]) == 0 | length(glist[[2]]) == 0) {
return(df_selected)
} else {
ag <- RobustRankAggreg::aggregateRanks(glist)
ag <- ag[match(df_selected[[test_factor_col]], ag$Name), ]
df_selected$RRA_score <- ag$Score
df_selected$Rank <- rank(df_selected$RRA_score, ties.method = "min")
df_selected <-
df_selected[order(df_selected$Rank, decreasing = FALSE), ]
return(df_selected)
}
} else {
return(df_selected)
}
})
return(top_by_group)
})
names(top_by_group_list) <- names(corr_list)
return(top_by_group_list)
}
library(ComprehensivePipelineUtils)
#' @param file_pattern file name pattern of TCGA data
#' @param use_all_cores whether use full cores
#' @param cores cores number to use
#' @param add_file_info whether add file info to res_list
#'
#' @return list of data and file path
#' @export
#'
#' @examples
#' NULL
read_tcga_xena <- function(folder_path, file_pattern = "*.tsv",
use_all_cores = FALSE, cores = 4,
add_file_info = FALSE) {
files <- list.files(folder_path, full.names = TRUE, pattern = file_pattern)
file_names <- lapply(list.files(folder_path), function(x) {
strsplit(x, "\\.")[[1]][1]
})
pb <- utils::txtProgressBar(min = 0, max = length(files), style = 3)
if (use_all_cores) {
doParallel::registerDoParallel(cores = parallel::detectCores())
} else {
doParallel::registerDoParallel(cores = cores)
}
if (add_file_info) {
i <- files
result <- foreach::foreach(
i = seq_along(i),
.progress = 'txtprogress',
.txtProgressBar = pb
) %dopar% {
list(
file = files[i],
data = read.table(files[i],
header = TRUE,
sep = "\t", check.names = FALSE
)
}
} else {
i <- files
result <- foreach::foreach(
i = seq_along(i),
.progress = 'txtprogress',
.txtProgressBar = pb
) %dopar% {
read.table(files[i],
header = TRUE,
sep = "\t", check.names = FALSE
)
}
close(pb)
names(result) <- file_names
return(result)
}
tcga.data <- read_tcga_xena("./Data/TCGA_14cancer/fpkm/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
#' @param file_pattern file name pattern of TCGA data
#' @param use_all_cores whether use full cores
#' @param cores cores number to use
#' @param add_file_info whether add file info to res_list
#'
#' @return list of data and file path
#' @export
#'
#' @examples
#' NULL
read_tcga_xena <- function(folder_path, file_pattern = "*.tsv",
use_all_cores = FALSE, cores = 4,
add_file_info = FALSE) {
files <- list.files(folder_path, full.names = TRUE, pattern = file_pattern)
file_names <- lapply(list.files(folder_path), function(x) {
strsplit(x, "\\.")[[1]][1]
})
pb <- utils::txtProgressBar(min = 0, max = length(files), style = 3)
if (use_all_cores) {
doParallel::registerDoParallel(cores = parallel::detectCores())
} else {
doParallel::registerDoParallel(cores = cores)
}
if (add_file_info) {
i <- files
result <- foreach::foreach(
i = seq_along(i),
.progress = 'txtprogress',
.txtProgressBar = pb
) %dopar% {
list(
file = files[i],
data = read.table(files[i],
header = TRUE,
sep = "\t", check.names = FALSE
)
}
} else {
i <- files
result <- foreach::foreach(
i = seq_along(i),
.progress = 'txtprogress',
.txtProgressBar = pb
) %dopar% {
read.table(files[i],
header = TRUE,
sep = "\t", check.names = FALSE
)
}
close(pb)
names(result) <- file_names
return(result)
}
tcga.data <- read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
devtools::document()
rm(list = c("read_tcga_xena"))
devtools::document()
library(ComprehensivePipelineUtils)
tcga.data <- read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
library(devtools)
use_package('data.table')
document()
library(ComprehensivePipelineUtils)
tcga.data <- read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
rm(list = ls())
gc()
library(ComprehensivePipelineUtils)
tcga.data <- read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
gc()
View(tcga.data)
View(tcga.data[["TCGA-BLCA"]])
gc()
library(ComprehensivePipelineUtils)
gc()
tcga.data <- read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
)
gc()
clear
check()
gc()
check()
styler::style_pkg()
lintr::lint_package()
gc()
rm(list = ls())
gc()
library(devtools)
document()
check()
library(ComprehensivePipelineUtils)
system.time(read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
))
gc()
system.time(read_tcga_xena("e:/project/DriverLnc2iPSC/Data/TCGA_14cancer/count/",
file_pattern = ".tsv",
use_all_cores = TRUE
))
gc()
styler::style_pkg()
lintr::lint_package()
check()
gc()
document()
library(ComprehensivePipelineUtils)
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
# read TCGA data
if (!file.exists("./Data/cancer_data_lst.rdata")) {
tcga.data <- read_tcga_xena("./Data/TCGA_14cancer/fpkm/",
file_pattern = ".tsv"
)
tumor.data <- tcga_sample_filter(tcga.data)[["tumor"]]
tumor.data <- fpkm_to_tpm(
data_list = tumor.data,
is_logged = TRUE,
get_logged = TRUE
)
save(
list = c("tumor.data"),
file = "./Data/cancer_data_lst.rdata"
)
} else {
load("./Data/cancer_data_lst.rdata")
}
# read driver lncRNA list and perform corr.coef
drivers.ID <- read.csv("./Data/pancancer_driver/pan_dri_5.csv")$lnc
target_factor.ID <- symbol_to_id(target_factor)
# corr.coef in tumor samples
corr.coef <- corr_rank(
data_list = tumor.data,
a_list = drivers.ID,
b_list = target_factor.ID,
method = "pearson",
adj_method = "BH"
)
system.time(corr_rank(
+   data_list = tumor.data,
system.time(corr_rank(
+   data_list = tumor.data,
system.time()
system.time(
corr_rank(
data_list = tumor.data,
a_list = drivers.ID,
b_list = target_factor.ID,
method = "pearson",
adj_method = "BH"
)
gc()
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
gc()
library(ComprehensivePipelineUtils)
gc()
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
# read TCGA data
if (!file.exists("./Data/cancer_data_lst.rdata")) {
tcga.data <- read_tcga_xena("./Data/TCGA_14cancer/fpkm/",
file_pattern = ".tsv"
)
tumor.data <- tcga_sample_filter(tcga.data)[["tumor"]]
tumor.data <- fpkm_to_tpm(
data_list = tumor.data,
is_logged = TRUE,
get_logged = TRUE
)
save(
list = c("tumor.data"),
file = "./Data/cancer_data_lst.rdata"
)
} else {
load("./Data/cancer_data_lst.rdata")
}
# read driver lncRNA list and perform corr.coef
drivers.ID <- read.csv("./Data/pancancer_driver/pan_dri_5.csv")$lnc
target_factor.ID <- symbol_to_id(target_factor)
# corr.coef in tumor samples
corr.coef <- corr_rank(
data_list = tumor.data,
a_list = drivers.ID,
b_list = target_factor.ID,
method = "pearson",
adj_method = "BH"
)
system.time(
corr_rank(
data_list = tumor.data,
a_list = drivers.ID,
b_list = target_factor.ID,
method = "pearson",
adj_method = "BH"
)
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
library(ComprehensivePipelineUtils)
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
library(ComprehensivePipelineUtils)
# init code
rm(list = ls())
setwd("e:/project/DriverLnc2iPSC/")
library(ComprehensivePipelineUtils)
target_factor <- c("SOX2", "POU5F1", "KLF4", "MYC")
# read TCGA data
if (!file.exists("./Data/cancer_data_lst.rdata")) {
tcga.data <- read_tcga_xena("./Data/TCGA_14cancer/fpkm/",
file_pattern = ".tsv"
)
tumor.data <- tcga_sample_filter(tcga.data)[["tumor"]]
tumor.data <- fpkm_to_tpm(
data_list = tumor.data,
is_logged = TRUE,
get_logged = TRUE
)
save(
list = c("tumor.data"),
file = "./Data/cancer_data_lst.rdata"
)
} else {
load("./Data/cancer_data_lst.rdata")
}
# read driver lncRNA list and perform corr.coef
drivers.ID <- read.csv("./Data/pancancer_driver/pan_dri_5.csv")$lnc
target_factor.ID <- symbol_to_id(target_factor)
# corr.coef in tumor samples
system.time(
corr_rank(
data_list = tumor.data,
a_list = drivers.ID,
b_list = target_factor.ID,
method = "pearson",
adj_method = "BH"
)
gc()
styler::style_pkg()
setwd()
styler::style_pkg()
lintr::lint_package()
library(devtools)
check()
gc()
document()
